name: Terraform Plan
description: Reusable action to run terraform plan with validation and security checks

inputs:
  is_destroy:
    description: "Whether to run terraform destroy"
    required: false
    default: "false"
  environment:
    description: "Environment to deploy to (e.g., dev, prod)"
    required: true
    default: dev
  var-file:
    description: "Terraform var file"
    required: false
    default: terraform.tfvars
  output-file:
    description: "Terraform plan output file"
    required: false
    default: tfplan
  timeout:
    description: "Timeout for terraform operations in minutes"
    required: false
    default: "30"

runs:
  using: "composite"
  steps:
    - name: Terraform Init
      shell: bash
      working-directory: environments/${{ inputs.environment }}
      run: |
        timeout ${{ inputs.timeout }}m terraform init -upgrade
        if [ $? -eq 124 ]; then
          echo "Terraform init timed out after ${{ inputs.timeout }} minutes"
          exit 1
        fi

    - name: Terraform Format & Validate
      shell: bash
      working-directory: environments/${{ inputs.environment }}
      run: |
        terraform fmt -check
        terraform validate

    - name: Run tflint
      shell: bash
      working-directory: environments/${{ inputs.environment }}
      run: tflint --init && tflint

    - name: Run terrascan
      shell: bash
      working-directory: environments/${{ inputs.environment }}
      run: terrascan scan -i terraform

    - name: Terraform Plan (or Destroy Plan)
      if: ${{ inputs.is_destroy == 'false' }}
      shell: bash
      working-directory: environments/${{ inputs.environment }}
      run: |
        timeout ${{ inputs.timeout }}m terraform plan -out=${{ inputs.output-file }} -input=false -var-file=${{ inputs.var-file }}
        if [ $? -eq 124 ]; then
          echo "Terraform plan timed out after ${{ inputs.timeout }} minutes"
          exit 1
        fi

    - name: Terraform Plan (or Destroy Plan)
      if: ${{ inputs.is_destroy == 'true' }}
      shell: bash
      working-directory: environments/${{ inputs.environment }}
      run: |
        timeout ${{ inputs.timeout }}m terraform plan -destroy -out=${{ inputs.output-file}} -input=false -var-file=${{ inputs.var-file }}
        if [ $? -eq 124 ]; then
          echo "Terraform destroy plan timed out after ${{ inputs.timeout }} minutes"
          exit 1
        fi

    - name: Check for sensitive values
      shell: bash
      working-directory: environments/${{ inputs.environment }}
      run: |
        if grep -r "password\|secret\|key\|token" .; then
          echo "Warning: Potential sensitive values found in plan output"
        fi

outputs:
  plan-file:
    description: "Path to the terraform plan file"
    value: environments/${{ inputs.environment }}/${{ inputs.output-file }}
