name: Terraform Plan
description: Reusable action to run terraform plan

inputs:
  is_destroy:
    description: "Whether to run terraform destroy"
    required: false
    default: "false"
  environment:
    description: "Environment to deploy to (e.g., dev, prod)"
    required: true
    default: dev
  var-file:
    description: "Terraform var file"
    required: false
    default: terraform.tfvars

runs:
  using: "composite"
  steps:
    - name: Fetch terraform.tfvars from GitHub Secrets
      shell: bash
      working-directory: environments/${{ inputs.environment }}
      run: |
        if [ "${{ inputs.environment }}" = "dev" ]; then
          echo "${{ secrets.TFVARS_DEV }}" | base64 -d > terraform.tfvars
        elif [ "${{ inputs.environment }}" = "prod" ]; then
          echo "${{ secrets.TFVARS_PROD }}" | base64 -d > terraform.tfvars
        else
          echo "Unsupported environment: ${{ inputs.environment }}"
          exit 1
        fi

    - name: Terraform Init
      shell: bash
      working-directory: environments/${{ inputs.environment }}
      run: terraform init -upgrade

    - name: Terraform Format & Validate
      shell: bash
      working-directory: environments/${{ inputs.environment }}
      run: |
        terraform fmt -check
        terraform validate

    - name: Terraform Plan (or Destroy Plan)
      shell: bash
      working-directory: environments/${{ inputs.environment }}
      run: |
        if [ "${{ inputs.is_destroy }}" = "true" ]; then
          terraform plan -destroy -out=tfplan -input=false -var-file=${{ inputs.var-file }}
        else
          terraform plan -out=tfplan -input=false -var-file=${{ inputs.var-file }}
        fi
