name: Terraform Destroy (Manual)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to destroy (dev or prod)"
        required: true
        default: dev
        type: choice
        options:
          - dev
          - prod
      is_destroy:
        description: "Confirm destroy execution"
        required: true
        default: false
        type: boolean
      reason:
        description: "Reason for destroying infrastructure"
        required: true
        type: string

# Add concurrency to prevent multiple runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  terraform-destroy:
    name: Terraform Destroy
    runs-on: infra-ubuntu-24-04
    timeout-minutes: 60

    environment:
      name: ${{ github.event.inputs.environment }}
      url: ${{ steps.apply.outputs.apply_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup AWS and Terraform
        uses: ./.github/actions/setup
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}

      - name: Fetch terraform.tfvars from GitHub Secrets
        working-directory: environments/${{ github.event.inputs.environment }}
        run: |
          if [ "${{ github.event.inputs.environment }}" = "dev" ]; then
            echo "${{ secrets.TFVARS_DEV }}" | base64 -d > terraform.tfvars
          elif [ "${{ github.event.inputs.environment }}" = "prod" ]; then
            echo "${{ secrets.TFVARS_PROD }}" | base64 -d > terraform.tfvars
          else
            echo "Unsupported environment: ${{ github.event.inputs.environment }}"
            exit 1
          fi

      - name: Run Terraform Plan (Destroy)
        id: plan
        uses: ./.github/actions/terraform-plan
        with:
          environment: ${{ github.event.inputs.environment }}
          is_destroy: true
          timeout: 30

      - name: Terraform Apply (Destroy)
        if: ${{ github.event.inputs.is_destroy == 'true' }}
        id: apply
        working-directory: environments/${{ github.event.inputs.environment }}
        run: |
          terraform apply -auto-approve ${{ steps.plan.outputs.plan-file }}
          echo "apply_url=https://${{ github.event.inputs.environment }}.example.com" >> $GITHUB_OUTPUT

      - name: Log Destroy Reason
        if: ${{ github.event.inputs.is_destroy == 'true' }}
        uses: actions/github-script@v7
        with:
          script: |
            const message = `üî® Infrastructure destroyed in ${{ github.event.inputs.environment }} environment\nReason: ${{ github.event.inputs.reason }}\n`;
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: message
            });

      - name: Notify on Success
        if: success() && github.event.inputs.is_destroy == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const message = `‚úÖ Infrastructure successfully destroyed in ${{ github.event.inputs.environment }} environment\n`;
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: message
            });

      - name: Notify on Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const message = `‚ùå Infrastructure destruction failed in ${{ github.event.inputs.environment }} environment\n`;
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: message
            });
